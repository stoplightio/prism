openapi: 3.0.0
info:
  version: v1.0
  title: Items API
  description: Item information and operations executable from across the SPS Ecosystem
  x-sps-service-id: "c01e04b5-87e0-44cf-9537-c0ea24f249ff"

tags:
  - name: Items
    description: Items are the complete description of an item, built up of all item fragements. Only item owners are allowed to call these endpoints. The intended use would be only during owner item management.
  - name: Item Fragments
    description: Item Fragements are the smallest unit of an item. They always contain company specific item data. The indended use would be when an item's non-owner is operating on item data only they have provided.
  - name: Item Views
    description: Item Views are a merge of owner and viewer item data into a single view. The intended use would be for most display or processing operations.
  - name: Item Media
    description: Media referenced inside an items attributes. These endpoints are to upload and retrieve the media references. Media retrieval is done via the "src" property.
  - name: Item Imports
    description: Item Imports handle bulk processing of inbound item data. An import is initialized and then
  - name: Item Import Templates
    description: Item Import Templates generated for bulk item imports. These templates are generated in spreadsheet format and can be filled out to bulk import item data via the POST /items/imports method.
  - name: Item Validation Errors

servers:
  - description: integration
    url: https://integration.network.api.spscommerce.com
  - description: prod
    url: https://network.api.spscommerce.com

security:
  - SpsBearer: [ ]

paths:
  /v1/items/{itemId}/fragments:
    post:
      operationId: item-fragment-create
      summary: Creates an Item Fragment
      description: Creates a new item fragment with attributes from the given payload. Note that a fragment is always related to an existing item, and as such needs to have an existing SPS Item Id included in it's payload.
      tags:
        - Item Fragments
      parameters:
        - $ref: '#/components/parameters/ContentLanguage'
        - $ref: '#/components/parameters/ItemId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemFragmentBase'
      responses:
        '204':
          description: Item Fragment has been successfully created.
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            ETag:
              $ref: '#/components/headers/ETag'
        '400':
          description: 'Invalid Data'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InvalidData'
              example:
                $ref: '#/components/examples/InvalidJson'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/Error'

    get:
      operationId: item-fragment-get-by-id
      summary: Get Item Fragment by ID
      description: Retrieves details about a specific item fragment.
      tags:
        - Item Fragments
      parameters:
        - $ref: '#/components/parameters/ItemId'
        - $ref: '#/components/parameters/ContentLanguage'
        - $ref: '#/components/parameters/FragmentOrgId'
      responses:
        '200':
          description: Item Fragment with the provided ID in the requested locale.
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemFragment'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'

    put:
      operationId: item-fragment-update
      summary: Update Item Fragment
      description: |
        Updates an existing item fragment with attributes from the given payload.
        The entire item fragment is overwritten with the new data provided.
      tags:
        - Item Fragments
      parameters:
        - $ref: '#/components/parameters/ItemId'
        - $ref: '#/components/parameters/ContentLanguage'
        - $ref: '#/components/parameters/IfMatch'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemFragmentBase'
      responses:
        '204':
          description: Item Fragment was successfully updated.
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            ETag:
              $ref: '#/components/headers/ETag'
        '400':
          description: 'Invalid Data'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InvalidData'
              example:
                $ref: '#/components/examples/InvalidJson'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '500':
          $ref: '#/components/responses/Error'

    patch:
      operationId: item-fragment-partial-update
      summary: Partial Update Item
      description: |
        Updates an existing item fragment with attributes from the given payload.
        Data provided will be merged with existing data. NULL or UNDEFINED properties will remain unchanged.
      tags:
        - Item Fragments
      parameters:
        - $ref: '#/components/parameters/ItemId'
        - $ref: '#/components/parameters/ContentLanguage'
        - $ref: '#/components/parameters/IfMatch'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemFragmentBase'
      responses:
        '204':
          description: Item Fragment was successfully updated.
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            ETag:
              $ref: '#/components/headers/ETag'
        '400':
          description: 'Invalid Data'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InvalidData'
              example:
                $ref: '#/components/examples/InvalidJson'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '500':
          $ref: '#/components/responses/Error'

    delete:
      operationId: item-fragment-delete
      summary: Delete Item Fragment
      description: Deletes an existing item fragment.
      tags:
        - Item Fragments
      parameters:
        - $ref: '#/components/parameters/ItemId'
        - $ref: '#/components/parameters/ContentLanguage'
        - $ref: '#/components/parameters/IfMatch'
        - $ref: '#/components/parameters/FragmentOrgId'
      responses:
        '204':
          description: Item Fragment was deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'

  /v1/items:
    post:
      operationId: item-create
      summary: Create Item
      description: Creates a new item with attributes from the given payload.
      tags:
        - Items
      parameters:
        - $ref: '#/components/parameters/ContentLanguage'
        - $ref: '#/components/parameters/OwnerOrgId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemBase'
      responses:
        '201':
          description: Item has been successfully created.
          headers:
            Location:
              $ref: '#/components/headers/Location'
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ItemId'
                  - $ref: '#/components/schemas/ItemRef'
        '400':
          description: 'Invalid Data'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InvalidData'
              example:
                $ref: '#/components/examples/InvalidJson'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/Error'

    get:
      operationId: item-search
      summary: Search Items
      description: |
        Retrieves a set of items that is filterable based on any attribute values any of it's fragments has. This search uses FIQL syntax for advanced search options against any attribute in the system. The list of attribute keys to use can be retrieved from the attribute endpoints.
        
        <table>
          <tr>
            <th>Operator</th>
            <th>Description</th>
            <th>Example</th>
          </tr>
          <tr>
            <td>==</td>
            <td>Equal To</td>
            <td>/items?filter=identifiers.vendorPartNumber==ABC-123</td>
          </tr>
          <tr>
            <td>=in=</td>
            <td>In</td>
            <td>/items?filter=id=in=(3fd038ac-fc50-4889-9c99-61161ca12b7b, 4aq038ac-fc50-4889-9c99-61161ca12b7b)</td>
          </tr>
          <tr>
            <td>=contains=</td>
            <td>Contains</td>
            <td>/items?filter=identifiers.vendorPartNumber=contains=ABC</td>
          </tr>
          <tr>
            <td>=containsic=</td>
            <td>Contains Ignore Case</td>
            <td>/items?filter=identifiers.vendorPartNumber=containsic=AbC</td>
          </tr>
          <tr>
            <td>=isnull=</td>
            <td>Is Null</td>
            <td>/items?filter=identifiers.gtin.gtin14=isnull=true</td>
          </tr>
          <tr>
            <td>and</td>
            <td>AND</td>
            <td>/items?filter=attributes.individuals.palletlength==20 and attributes.palletwidth=gt=20</td>
          </tr>
          <tr>
            <td>or</td>
            <td>OR</td>
            <td>/items?filter=attributes.individuals.numberofhandles==2 or attributes.numberofburners==4</td>
          </tr>
        </table>
        
        These operators can be combined in may ways. Here is a more complex example:
        
        /items?filter=attributes.individuals.filesize=gt=1024 and attributes.orientation==Portrait or (attributes.format==JPEG or attributes.format==PNG)
      tags:
        - Items
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
        - $ref: '#/components/parameters/OwnerOrgId'
        - $ref: '#/components/parameters/ViewerOrgId'
        - $ref: '#/components/parameters/ContentLanguage'
        - $ref: '#/components/parameters/StageType'
        - $ref: '#/components/parameters/StageOrgId'
        - $ref: '#/components/parameters/StageOverridesOnly'
      responses:
        '200':
          description: A list of items results based on filter criteria.
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
                  paging:
                    $ref: '#/components/schemas/PagingCursors'
        '400':
          $ref: '#/components/responses/InvalidData'
        '500':
          $ref: '#/components/responses/Error'
  /v1/items/{itemId}:
    get:
      operationId: item-get-by-id
      summary: Get Item by ID
      description: Retrieves details about a specific item.
      tags:
        - Items
      parameters:
        - $ref: '#/components/parameters/ItemId'
        - $ref: '#/components/parameters/ContentLanguage'
        - $ref: '#/components/parameters/IfNoneMatch'
        - $ref: '#/components/parameters/ViewerOrgId'
      responses:
        '200':
          description: Item with the provided ID in the requested locale.
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/InvalidData'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '500':
          $ref: '#/components/responses/Error'

    put:
      operationId: item-update
      summary: Update Item
      description: |
        Updates an existing item with attributes from the given payload.
        The entire item is overwritten with new item provided.
      tags:
        - Items
      parameters:
        - $ref: '#/components/parameters/ItemId'
        - $ref: '#/components/parameters/ContentLanguage'
        - $ref: '#/components/parameters/IfMatch'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '204':
          description: Item was successfully updated.
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            ETag:
              $ref: '#/components/headers/ETag'
        '400':
          description: 'Invalid Data'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InvalidData'
              example:
                $ref: '#/components/examples/InvalidJson'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '500':
          $ref: '#/components/responses/Error'

    patch:
      operationId: item-partial-update
      summary: Partial Update Item
      description: |
        Updates an existing item with attributes from the given payload.
        Item provided will be merged with existing item. NULL or UNDEFINED properties will remain unchanged.
      tags:
        - Items
      parameters:
        - $ref: '#/components/parameters/ItemId'
        - $ref: '#/components/parameters/ContentLanguage'
        - $ref: '#/components/parameters/IfMatch'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '204':
          description: Item was successfully updated.
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            ETag:
              $ref: '#/components/headers/ETag'
        '400':
          description: 'Invalid Data'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InvalidData'
              example:
                $ref: '#/components/examples/InvalidJson'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '500':
          $ref: '#/components/responses/Error'

    delete:
      operationId: item-delete
      summary: Delete Item
      description: Deletes an existing item.
      tags:
        - Items
      parameters:
        - $ref: '#/components/parameters/ItemId'
        - $ref: '#/components/parameters/ContentLanguage'
        - $ref: '#/components/parameters/IfMatch'
      responses:
        '204':
          description: Item was deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'

  /v1/items/views:
    get:
      operationId: item-views-search
      summary: Search Item Views
      description: |
        Retrieves a set of item views that is filterable based on any attribute values it has. This search uses FIQL syntax for advanced search options against any attribute in the system. The list of attribute keys to use can be retrieved from the attribute endpoints.
        
        <table>
          <tr>
            <th>Operator</th>
            <th>Description</th>
            <th>Example</th>
          </tr>
          <tr>
            <td>==</td>
            <td>Equal To</td>
            <td>/items/views?filter=identifiers.vendorPartNumber==ABC-123</td>
          </tr>
          <tr>
            <td>=in=</td>
            <td>In</td>
            <td>/items/views?filter=id=in=(3fd038ac-fc50-4889-9c99-61161ca12b7b, 4aq038ac-fc50-4889-9c99-61161ca12b7b)</td>
          </tr>
          <tr>
            <td>=contains=</td>
            <td>Contains</td>
            <td>/items/views?filter=identifiers.vendorPartNumber=contains=ABC</td>
          </tr>
          <tr>
            <td>=containsic=</td>
            <td>Contains Ignore Case</td>
            <td>/items/views?filter=identifiers.vendorPartNumber=containsic=AbC</td>
          </tr>
          <tr>
            <td>=isnull=</td>
            <td>Is Null</td>
            <td>/items/views?filter=identifiers.gtin.gtin14=isnull=true</td>
          </tr>
          <tr>
            <td>and</td>
            <td>AND</td>
            <td>/items/views?filter=attributes.individuals.palletlength==20 and attributes.palletwidth=gt=20</td>
          </tr>
          <tr>
            <td>or</td>
            <td>OR</td>
            <td>/items/views?filter=attributes.individuals.numberofhandles==2 or attributes.numberofburners==4</td>
          </tr>
        </table>
        
        These operators can be combined in may ways. Here is a more complex example:
        
        /items/views?filter=attributes.individuals.filesize=gt=1024 and attributes.orientation==Portrait or (attributes.format==JPEG or attributes.format==PNG)
      tags:
        - Item Views
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
        - $ref: '#/components/parameters/OwnerOrgId'
        - $ref: '#/components/parameters/ViewerOrgId'
        - $ref: '#/components/parameters/ContentLanguage'
      responses:
        '200':
          description: A list of items results based on filter criteria.
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemView'
                  paging:
                    $ref: '#/components/schemas/PagingCursors'
        '400':
          $ref: '#/components/responses/InvalidData'
        '500':
          $ref: '#/components/responses/Error'

  /v1/items/{itemId}/views:
    get:
      operationId: item-views-get-by-id
      summary: Get Item View by ID
      description: Retrieves details about a specific item view.
      tags:
        - Item Views
      parameters:
        - $ref: '#/components/parameters/ItemId'
        - $ref: '#/components/parameters/ContentLanguage'
        - $ref: '#/components/parameters/ViewerOrgId'
      responses:
        '200':
          description: Item View with the provided ID in the requested locale.
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemView'
        '400':
          $ref: '#/components/responses/InvalidData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'

  /v1/items/views/lookup:
    post:
      operationId: item-views-lookup
      summary: Lookup Item
      description: |
        Retrieves a single item view based on item identifiers passed in. The item identifiers are grouped into different priority levels which determine which ones are used together when searching/filtering. These are overwritable at the trading partnership level (currently only in the Assortment Relationship Service API). The default priorities are as follows:
        
        Priority 1 (globally unique identifiers)
        - gtin.upc
        - gtin.ean8
        - gtin.ean13
        - gtin.gtin14
        - gtin.upcCaseCode
        - isbn
        - nationalDrugCode.value
        - nationalDrugCode.format
        - drugIdentificationNumber
        - nationalHealthRelatedItemCode
        - internationalStandardSerialNumber
        - nabcaNumber

        Priority 2 (supplier specific identifiers)
        - vendorPartNumber
        - manufacturersPartNumber
        - erpId
        - componentId
        - sku

        Priority 3 (retailer specific identifiers)
        - buyerPartNumber
        
        Whether using default or trading partner specific priority groups, they are used to try to find an item match using the following steps:
        <ol>
          <li>
            Search the database using the attributes in the current priority (starting with priority 1).
            <ol type="a">
              <li>If you found exactly 1 result, you have found your item and that item is returned.</li>
              <li>If there are no results, repeat step 1 with the next priority. If this was the last priority set an error is returned.</li>
              <li>
                If there are more than 1 result, use the next priority attributes to filter the list of results you got back.
                <ol type="i">
                  <li>If you found exactly 1 result, you have found your item and that item is returned.</li>
                  <li>If there are no results, you have no matches and an error is returned.</li>
                  <li>If there are more than 1 result still, repeat step c with the next set of priority attributes. If this was the last priority set an error is returned.</li>
                </ol>
              </li>
            </ol>
          </li>
        </ol>
      

      tags:
        - Item Views
      parameters:
        - $ref: '#/components/parameters/ContentLanguage'
        - $ref: '#/components/parameters/OwnerOrgId'
        - $ref: '#/components/parameters/ViewerOrgId'
        - $ref: '#/components/parameters/ViewMode'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/spscommerce/Items/1.1#/components/schemas/PrimaryItemIdentifiers'
      responses:
        '200':
          description: A single resolved item view based on filter criteria.
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemView'
        "400":
          description: 'Invalid Request'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InvalidData'
              examples:
                InvalidRequest:
                  value:
                    title: Bad Request
                    status: 400
                    requestId: b6d9a290-9f20-465b-bcd3-4a5166eeb3d7
                    detail: Invalid lookup query. The lookup configuration specifies [ean,retailerpartnumber] as searchable attribtes, and your query was on the [vendorpartnumber] attributes.
                MultipleResponses:
                  value:
                    title: Bad Request
                    status: 400
                    requestId: b6d9a290-9f20-465b-bcd3-4a5166eeb3d7
                    detail: "2 matches were found when trying to lookup an item"
                BadViewerOrgId:
                  value:
                    title: Bad Request
                    status: 400
                    requestId: b6d9a290-9f20-465b-bcd3-4a5166eeb3d7
                    detail: "Could not locate company from identity ID 2345676"
                BadOwnerOrgId:
                  value:
                    title: Bad Request
                    status: 400
                    requestId: b6d9a290-9f20-465b-bcd3-4a5166eeb3d7
                    detail: "Could not locate company from identity ID 2345676"
                InvalidJson:
                  $ref: '#/components/examples/InvalidJson'
        "404":
          description: 'Invalid Request'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                InvalidRequest:
                  value:
                    title: Not Found
                    status: 404
                    requestId: b6d9a290-9f20-465b-bcd3-4a5166eeb3d7
                    detail: "No matching results were found matching the query"
        '500':
          $ref: '#/components/responses/Error'
  /v1/items/media:
    post:
      operationId: item-media-create
      summary: Uploads a new Media object
      description: Uploads a new Media object for processing to later be attached to an item. The "image" property is a base64 encoded file.
      tags:
        - Item Media
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaUpload'
      responses:
        '202':
          description: Item media upload operation was accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          $ref: '#/components/responses/InvalidData'
        '500':
          $ref: '#/components/responses/Error'
  /v1/items/imports:
    get:
      operationId: items-import-status
      summary: Get Item Import Operations
      description: |
        Retrieves imports for the current company. This search uses FIQL syntax for advanced search options against any properties on the response entity.
        
        <table>
          <tr>
            <th>Operator</th>
            <th>Description</th>
            <th>Example</th>
          </tr>
          <tr>
            <td>==</td>
            <td>Equal To</td>
            <td>/items/imports?filter=importStatus==IN_PROGRESS</td>
          </tr>
          <tr>
            <td>=in=</td>
            <td>In</td>
            <td>/items/imports?filter=id=in=(3fd038ac-fc50-4889-9c99-61161ca12b7b, 4aq038ac-fc50-4889-9c99-61161ca12b7b)</td>
          </tr>
          <tr>
            <td>and</td>
            <td>AND</td>
            <td>/items/imports?filter=importStatus==IN_PROGRESS and retentionPolicy==ALL</td>
          </tr>
          <tr>
            <td>or</td>
            <td>OR</td>
            <td>/items/imports?filter=importStatus==IN_PROGRESS or retentionPolicy==ALL</td>
          </tr>
        </table>
      tags:
        - Item Imports
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
        - $ref: '#/components/parameters/OwnerOrgId'
      responses:
        '200':
          description: List of Item Imports
          content:
            application/json:
              schema:
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemImport'
                  paging:
                    $ref: '#/components/schemas/PagingCursors'
        '500':
          $ref: '#/components/responses/Error'

    post:
      operationId: items-import
      summary: Queues a Bulk Item Import
      description: |
        Creates, updates, or deletes an item record for each entry provided. 
        Useful if modifying/adding a large number of items at one time.
        This operation executes asynchronously and will return before all items have been processed.

        For very large item imports, you can set the status to IN_PROGRESS and POST multiple item payloads to the same import.

        Partial syncs will update only the items passed in. Full sync indicates any of this customers items not modified by this operation are deleted at the end (deletes are inferred).
      tags:
        - Item Imports
      parameters:
        - $ref: '#/components/parameters/OwnerOrgId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                uploadStatus:
                  description: |
                    Defaults to FINISHED. Set this value to IN_PROGRESS if there is more than one batch of items being uploaded that you want contained in a single operation.
                  type: string
                  enum: [ IN_PROGRESS, FINISHED ]
                retentionPolicy:
                  description: |
                    Defaults to ALL. ALL will keep all items that were not updated in this import. RESET indicates any of this customers items not modified by this operation are deleted at the end (deletes are inferred).
                  type: string
                  enum: [ ALL, RESET ]
                operations:
                  type: array
                  items:
                    $ref: '#/components/schemas/ItemImportOperation'
          multipart/form-data:
            schema:
              properties:
                form:
                  type: string
                  format: binary
      responses:
        '201':
          description: Item import operation was accepted.
          headers:
            Location:
              $ref: '#/components/headers/Location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemImport'
        '400':
          description: 'Invalid Data'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InvalidData'
              example:
                $ref: '#/components/examples/InvalidJson'
        '500':
          $ref: '#/components/responses/Error'

  /v1/items/imports/{itemImportId}:
    get:
      operationId: item-import-status
      summary: Get Specific Item Import Details
      description: Retrieves a specific import details for the current company.
      tags:
        - Item Imports
      parameters:
        - $ref: '#/components/parameters/OwnerOrgId'
        - name: itemImportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of Item Imports
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemImport'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'

    patch:
      operationId: items-import-update-status
      summary: Updates the Bulk Item Import Status
      description: |
        Called to update the status to FINISHED when you are ready to begin processing the item data.
      tags:
        - Item Imports
      parameters:
        - $ref: '#/components/parameters/OwnerOrgId'
        - name: itemImportId
          in: path
          required: true
          schema:
            type: string
        - name: itemCount
          in: query
          required: false
          schema:
            type: integer
        - name: validItemCount
          in: query
          required: false
          schema:
            type: integer
        - name: invalidItemCount
          in: query
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                uploadStatus:
                  description: |
                    Defaults to FINISHED. Set this value to IN_PROGRESS if there is more than one batch of items being uploaded that you want contained in a single operation.
                  type: string
                  enum: [ IN_PROGRESS, FINISHED ]
                operations:
                  type: array
                  nullable: true
                  items:
                    $ref: '#/components/schemas/ItemImportOperation'
      responses:
        '200':
          description: Item import operation was accepted and async execution is scheduled to begin.
        '202':
          description: Item import operation was accepted but not yet scheduled for execution.
        '400':
          description: 'Invalid Data'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InvalidData'
              example:
                $ref: '#/components/examples/InvalidJson'
        '500':
          $ref: '#/components/responses/Error'


  /v1/items/import-templates/generate-by-attributes:
    post:
      operationId: items-import-templates-attributes
      summary: Generates an item import template based on a list of attributes.
      description: |
        Creates a new item import template in spreadsheet format. This template can be filled out to bulk import item data via the POST /items/imports method.
      tags:
        - Item Import Templates
      parameters:
        - $ref: '#/components/parameters/OwnerOrgId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                includeGuides:
                  description: |
                    If true, the template will be generated with attribute guide tabs on how to fill out the spreadsheet.
                  type: boolean
                  default: false
                attributes:
                  description: |
                    A list of attributes to include as columns in the spreadsheet
                  type: array
                  nullable: true
                  items:
                    type: string
                    example:
                      upc
      responses:
        '200':
          description: Item import template generation was accepted.
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '400':
          description: 'Invalid Data'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InvalidData'
              example:
                $ref: '#/components/examples/InvalidJson'
        '500':
          $ref: '#/components/responses/Error'

  /v1/items/import-templates/generate-by-trading-partners:
    post:
      operationId: items-import-templates-trading-partners
      summary: Generates an item import template based on Trading Partnership requirements.
      description: |
        Creates a new item import template in spreadsheet format. This template can be filled out to bulk import item data via the POST /items/imports method.
      tags:
        - Item Import Templates
      parameters:
        - $ref: '#/components/parameters/OwnerOrgId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                multiSheet:
                  description: |
                    If true, the template will be generated with multiple sheets.
                  type: boolean
                  default: false
                includeGuides:
                  description: |
                    If true, the template will be generated with attribute guide tabs on how to fill out the spreadsheet.
                  type: boolean
                  default: false
                tradingPartners:
                  description: |
                    A list of trading partners that have been tagged with attributes important to them in Attribute Registry. All attributes tagged on these trading partners will be included as columns in the spreadsheet.
                  type: array
                  nullable: true
                  items:
                    allOf:
                      - $ref: 'https://api.swaggerhub.com/domains/spscommerce/References/1.0#/components/schemas/OrgSummary'
      responses:
        '200':
          description: Item import template generation was accepted.
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '400':
          description: 'Invalid Data'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InvalidData'
              example:
                $ref: '#/components/examples/InvalidJson'
        '500':
          $ref: '#/components/responses/Error'

  /v1/items/import-templates/generate-by-categories:
    post:
      operationId: items-import-templates-categories
      summary: Generates an item import template based on categories.
      description: |
        Creates a new item import template in spreadsheet format. This template can be filled out to bulk import item data via the POST /items/imports method.
      tags:
        - Item Import Templates
      parameters:
        - $ref: '#/components/parameters/OwnerOrgId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                includeGuides:
                  description: |
                    If true, the template will be generated with attribute guide tabs on how to fill out the spreadsheet.
                  type: boolean
                  default: false
                categories:
                  description: |
                    A list of category IDs. All attributes belonging to these categories will be included as columns in the spreadsheet.
                  type: array
                  nullable: true
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uid
                        example: acf583ef-63e5-45c6-a2b8-e0ee507ab9aa

      responses:
        '200':
          description: Item import template generation was accepted.
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '400':
          description: 'Invalid Data'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InvalidData'
              example:
                $ref: '#/components/examples/InvalidJson'
        '500':
          $ref: '#/components/responses/Error'

  /v1/items/{itemId}/validation-errors:
    get:
      operationId: item-errors-get-by-id
      summary: Get Item Errors by SPS Item ID
      description: |
        Retrieves error details about a specific item.
        Can get locale specific errors if the ContentLanguage is used.
      tags:
        - Item Validation Errors
      parameters:
        - $ref: '#/components/parameters/ItemId'
        - $ref: '#/components/parameters/ContentLanguage'
      responses:
        '200':
          description: Item errors with the provided ID in the requested locale.
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'

components:

  responses:

    Error:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Errors/2.0#/components/responses/Error'

    InvalidData:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Errors/2.0#/components/responses/InvalidData'

    Conflict:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Errors/2.0#/components/responses/Conflict'

    NotFound:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Errors/2.0#/components/responses/NotFound'

    PreconditionFailed:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Errors/2.0#/components/responses/PreconditionFailed'

  parameters:

    Filter:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Collections/1.0#/components/parameters/Filter'

    Limit:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Collections/1.0#/components/parameters/Limit'

    Cursor:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Collections/1.0#/components/parameters/Cursor'

    ContentLanguage:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Global/1.0#/components/parameters/ContentLanguage'

    IfMatch:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Global/1.0#/components/parameters/IfMatch'

    IfNoneMatch:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Global/1.0#/components/parameters/IfNoneMatch'


    ItemId:
      name: itemId
      in: path
      required: true
      description: |
        A unique object identifier for an item.
        Can be used to build an SPS Item Ref, for example: sps:item::{itemId}
      schema:
        description: |
          A unique Item object identifier.
        type: string
        format: uid
        example: 3fd038ac-fc50-4889-9c99-61161ca12b7b

    OwnerOrgId:
      name: ownerOrgId
      in: query
      description: |
        A unique object identifier for an org that is the owner of an item.
        Can be used to build an SPS Org Ref, for example: sps:org::{orgId}
      schema:
        description: |
          A unique Org object identifier.
        type: string
        format: uid
        example: 9005f175-87cf-44e2-a2e8-84950720339b

    ViewerOrgId:
      name: viewerOrgId
      in: query
      description: |
        A unique object identifier for an org that is viewing an item from a particular perspective. For instance a retailer viewing of an item with data merged from their fragment and that of the item owners.
        Can be used to build an SPS Org Ref, for example: sps:org::{orgId}
      schema:
        description: |
          A unique Org object identifier.
        type: string
        format: uid
        example: 9005f175-87cf-44e2-a2e8-84950720339b

    ViewMode:
      name: viewMode
      in: query
      description: |
        Can be used to control the item data returned when looking up an item. 
        MERGED - (the default) means item data merged from the fragment of the viewing org (for instance a retailer) with that of the item's owner.
        OWNER - item data from the fragment of the item's owner only.
      schema:
        type: string
        default: MERGED
        enum:
          - MERGED
          - OWNER

    FragmentOrgId:
      name: fragmentOrgId
      in: query
      description: |
        A unique object identifier for an org that is the owner of a specific fragment of item data.
        Can be used to build an SPS Org Ref, for example: sps:org::{orgId}
      schema:
        description: |
          A unique Org object identifier.
        type: string
        format: uid
        example: 9005f175-87cf-44e2-a2e8-84950720339b

    StageOrgId:
      name: stageOrgId
      in: query
      x-internal: true
      description: The Org Id used to filter based on stage information/settings.
      schema:
        type: string

    StageOverridesOnly:
      name: stageOverridesOnly
      in: query
      x-internal: true
      description: When true, shows only items with item-level stage overrides currently set.
      schema:
        type: boolean

    StageType:
      name: stageType
      in: query
      x-internal: true
      description: The stage type to be filtered on. Can be used multiple times to filter on multiple stage types.
      schema:
        type: string
        enum:
          - CORE
          - CORE_PLUS
          - CORE_ADVANCED
          - ENRICHED

  headers:

    Content-Language:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Global/1.0#/components/headers/Content-Language'

    Location:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Global/1.0#/components/headers/Location'

    ETag:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Global/1.0#/components/headers/ETag'

  securitySchemes:

    SpsBearer:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Security/1.0#/components/securitySchemes/SpsBearer'

  schemas:
    Error:
      $ref: "https://api.swaggerhub.com/domains/spscommerce/Errors/2.0#/components/schemas/Error"

    InvalidData:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Errors/2.0#/components/schemas/ErrorFieldValidation'

    PagingCursors:
      $ref: 'https://api.swaggerhub.com/domains/spscommerce/Collections/1.0#/components/schemas/PagingCursors'

    ItemRef:
      type: object
      properties:
        ref:
          $ref: 'https://api.swaggerhub.com/domains/spscommerce/URNs/1.0#/components/schemas/SpsItemRef'

    ItemId:
      description: SPS Item Object ID to uniquely identify an Item.
      type: object
      properties:
        id:
          description: |
            A unique Item object identifier.
          type: string
          example: 3fd038ac-fc50-4889-9c99-61161ca12b7b

    ItemChildRef:
      type: object
      properties:
        itemRef:
          $ref: 'https://api.swaggerhub.com/domains/spscommerce/URNs/1.0#/components/schemas/SpsItemRef'

    ItemChildId:
      description: SPS Item Object ID to uniquely identify an Item.
      type: object
      properties:
        itemId:
          description: |
            A unique Item object identifier.
          type: string
          example: 3fd038ac-fc50-4889-9c99-61161ca12b7b

    ItemFragmentOrg:
      type: object
      properties:
        fragmentOrg:
          allOf:
            - $ref: 'https://api.swaggerhub.com/domains/spscommerce/References/1.0#/components/schemas/OrgSummary'
            - description: The SPS Organization reference of whos fragment of this item was requested.

    ItemViewerOrg:
      type: object
      properties:
        viewerOrg:
          allOf:
            - $ref: 'https://api.swaggerhub.com/domains/spscommerce/References/1.0#/components/schemas/OrgSummary'
            - description: The SPS Organization reference of whos view of this item was requested.

    ItemOwnerOrg:
      type: object
      properties:
        ownerOrg:
          allOf:
            - $ref: 'https://api.swaggerhub.com/domains/spscommerce/References/1.0#/components/schemas/OrgSummary'
            - description: The SPS Organization reference of the company who owns this item.

    Item:
      description: Contains all information related to an item than can be managed.
      type: object
      allOf:
        - $ref: '#/components/schemas/ItemId'
        - $ref: '#/components/schemas/ItemRef'
        - $ref: '#/components/schemas/ItemOwnerOrg'
        - $ref: '#/components/schemas/ItemBase'

    ItemBase:
      description: An object being described by a set of attributes. Items can be sellable or non-sellable and can be made up of multiple other items.
      type: object
      properties:
        type:
          type: string
          enum:
            - PRIMARY_SELLABLE
            - NON_SELLABLE
            - PACK
            - PRODUCT_NON_SELLABLE
            - PRODUCT_VARIANT_SELLABLE
        description:
          description: Vendor Part Description text that describes what this item is in a human readable way
          type: string
          nullable: true
        createdDateTime:
          type: string
          nullable: true
          format: date-time
          example: "2021-05-16T14:12:07Z"
        modifiedDateTime:
          type: string
          nullable: true
          format: date-time
          example: "2021-05-16T14:12:07Z"
        fragments:
          type: array
          items:
            $ref: '#/components/schemas/ItemFragmentBase'
        relationships:
          description: Some items are made up of smaller items or are part of a sellable group of items. These relationships are comprised of components that are defined in this section.
          type: object
          nullable: true
          properties:
            packs:
              description: Item ids of any related parent items. These may be sellable and/or non-sellable items.
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/ItemId'
            parentItems:
              description: Item ids of any related parent items. These may be sellable and/or non-sellable items.
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/ItemId'
            childItems:
              description: Item ids of any related child items. These may be sellable and/or non-sellable items.
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/ItemId'

    ItemView:
      description: Contains information about an item from a particular users point of view. If the view is for a non-owner, it will contain information merged from two Item Fragments (the owners and the viewers).
      type: object
      allOf:
        - $ref: '#/components/schemas/ItemChildId'
        - $ref: '#/components/schemas/ItemChildRef'
        - $ref: '#/components/schemas/ItemOwnerOrg'
        - $ref: '#/components/schemas/ItemViewerOrg'
        - $ref: '#/components/schemas/ItemViewBase'

    ItemViewBase:
      description: An object being described by a set of attributes. Items can be sellable or non-sellable and can be made up of multiple other items.
      type: object
      properties:
        type:
          type: string
          enum:
            - PRIMARY_SELLABLE
            - NON_SELLABLE
            - PRODUCT_NON_SELLABLE
            - PRODUCT_VARIANT_SELLABLE
        description:
          description: Vendor Part Description text that describes what this item is in a human readable way
          type: string
          nullable: true
        createdDateTime:
          type: string
          nullable: true
          format: date-time
          example: "2021-05-16T14:12:07Z"
        modifiedDateTime:
          type: string
          nullable: true
          format: date-time
          example: "2021-05-16T14:12:07Z"
        identifiers:
          $ref: 'https://api.swaggerhub.com/domains/spscommerce/Items/1.1#/components/schemas/PrimaryItemIdentifiers'
        attributes:
          description: Properties used to describe this item in detail.
          type: object
          nullable: true
          properties:
            individuals:
              description: A descriptor for this item. An individual attribute may have either a one value or a repeatable list of values assigned to it.
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/ItemAttributeIndividual'
            clusters:
              description: This item's attributes that are part of a repeatable group.
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/ItemAttributeCluster'
        quantityUomConversions:
          description: Quantity unit of measure conversions
          type: array
          nullable: true
          items:
            properties:
              uom1:
                type: string
              uom2:
                type: string
              conversionFactor:
                description: The conversion factor from UOM 1 to UOM 2
                type: string
        relationships:
          description: Some items are made up of smaller items or are part of a sellable group of items. These relationships are comprised of components that are defined in this section.
          type: object
          nullable: true
          properties:
            packs:
              description: Item ids of any related parent items. These may be sellable and/or non-sellable items.
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/ItemId'
            parentItems:
              description: Item ids of any related parent items. These may be sellable and/or non-sellable items.
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/ItemId'
            childItems:
              description: Item ids of any related child items. These may be sellable and/or non-sellable items.
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/ItemId'

    ItemFragment:
      description: Contains information about an item from a particular users point of view.
      type: object
      allOf:
        - $ref: '#/components/schemas/ItemChildId'
        - $ref: '#/components/schemas/ItemChildRef'
        - $ref: '#/components/schemas/ItemFragmentBase'

    ItemFragmentBase:
      description: An object being described by a set of attributes. Items can be sellable or non-sellable and can be made up of multiple other items.
      type: object
      allOf:
        - $ref: '#/components/schemas/ItemFragmentOrg'
      properties:
        identifiers:
          $ref: 'https://api.swaggerhub.com/domains/spscommerce/Items/1.1#/components/schemas/PrimaryItemIdentifiers'
        attributes:
          description: Properties used to describe this item in detail.
          type: object
          nullable: true
          properties:
            individuals:
              description: A descriptor for this item. An individual attribute may have either a one value or a repeatable list of values assigned to it.
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/ItemAttributeIndividual'
            clusters:
              description: This item's attributes that are part of a repeatable group.
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/ItemAttributeCluster'
        quantityUomConversions:
          description: Quantity unit of measure conversions
          type: array
          nullable: true
          items:
            properties:
              uom1:
                type: string
              uom2:
                type: string
              conversionFactor:
                description: The conversion factor from UOM 1 to UOM 2
                type: string

    ItemAttributeIndividual:
      description: Used to represent an individual value for an attribute.
      type: object
      properties:
        id:
          type: string
        values:
          type: array
          items:
            type: string
      example:
        id: "socksize"
        values: [ "Medium" ]

    ItemImport:
      description: Contains status information about a specific item import.
      type: object
      properties:
        id:
          description: |
            A unique Item Import object identifier.
          type: string
          example: 3fd038ac-fc50-4889-9c99-61161ca12b7b
        name:
          type: string
          nullable: true
        uploadStatus:
          type: string
          enum: [ IN_PROGRESS, FINISHED ]
        retentionPolicy:
          description: |
            Defaults to ALL. ALL will keep all items that were not updated in this import. RESET indicates any of this customers items not modified by this operation are deleted at the end (deletes are inferred).
          type: string
          enum: [ ALL, RESET ]
        importStatus:
          type: string
          enum: [ QUEUED, IN_PROGRESS, INVALID_FORMAT, VALIDATION_FAILED, COMPLETED ]
        createdDateTime:
          type: string
          nullable: true
          format: date-time
          example: "2021-05-16T14:12:07Z"
        completedDateTime:
          type: string
          nullable: true
          format: date-time
          example: "2021-05-16T14:12:07Z"
        errorCount:
          type: integer
          nullable: true
          format: int32
        validItemCount:
          type: integer
          x-internal: true
          nullable: true
          format: int32
        invalidItemCount:
          type: integer
          x-internal: true
          nullable: true
          format: int32
        totalItemCount:
          type: integer
          x-internal: true
          nullable: true
          format: int32

    ItemImportOperation:
      description: Contains an item to update as well as the type of operation (ADD_UPDATE or DELETE)
      type: object
      properties:
        type:
          type: string
          enum: [ ADD_UPDATE, DELETE ]
        contentLanguage:
          type: string
        item:
          $ref: '#/components/schemas/Item'

    ItemError:
      description: Contains all information about current errors on a specific item.
      type: object
      allOf:
        - $ref: '#/components/schemas/ItemId'
        - $ref: '#/components/schemas/ItemRef'
      properties:
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/ItemValidationError'

    ItemValidationError:
      description: Contains item validation error information related to a single validation set or map.
      type: object
      properties:
        attributeName:
          type: string
          nullable: true
        errorMessage:
          type: string
        attributeNames:
          type: array
          items:
            type: string
        stages:
          type: array
          items:
            $ref: '#/components/schemas/ItemValidationStage'

    ItemValidationStage:
      description: Container trading partner specific stage validation information.
      type: object
      properties:
        org:
          nullable: true
          allOf:
            - $ref: 'https://api.swaggerhub.com/domains/spscommerce/References/1.0#/components/schemas/OrgSummary'
        stage:
          type: string
          nullable: true
          enum:
            - CORE
            - CORE_PLUS
            - CORE_ADVANCED
            - ENRICHED
        isValid:
          type: boolean

    ItemAttributeCluster:
      description: Used to represent multiple values for a collection of related attributes.
      type: object
      properties:
        name:
          type: string
        attributes:
          type: array
          items:
            properties:
              id:
                type: string
              values:
                type: array
                items:
                  type: string
      example:
        name: "BATTERY"
        attributes: [
          {
            id: "batteryquantity",
            values: [ "2" ]
          },
          {
            id: "batterysize",
            values: [ "AAA" ]
          }
        ]

    MediaUpload:
      type: object
      properties:
        fileName:
          type: string
          example: file.jpeg
        image:
          description: base64 encoded image
          type: string
          example: UklGRkYBAABXRUJQVlA4TDoBAAAv4AA4EFcwpuMx3wraSFKDJ4HvntnCB+AVBgSCMIFwfDxAtbXHcSP3gvaYmTUU5srzCHV4UEWmNloc1MsYpkePqRlp0v5zjLwR/WfitpGgBISW7e7dD2j7t962Ltx475eBe590qXc2hZHeeZsevvBi+Qd8sWngmZkvA+9sq9ew2BJ29c5XNm0IOYuF/xT+s22avRocbxdo7DHXE0xtS0Q0mk6nw8B4mnSod5aFTO8cp4f3pqJV5guC0KwEildmtOSMl8/AajNNg6g3gFHnisFs4LHCg5t4tPFowbEuw7FDaKxLtHcC41egS0Au4kIdGnDNN9C+wpWO4Ur0HhUrUcGS7JEzLQv7zrl54MDZ6jVOrBJRZuxMDx85sWSlBPjUL/wHg4FtieJfU51Af2Cr1+h5WTTAnpdYREU3Eg==

    Media:
      type: object
      properties:
        fileName:
          type: string
          example: file.jpeg
        fileSize:
          type: string
          nullable: true
        createdDateTime:
          type: string
          nullable: true
          format: date-time
        updatedAt:
          type: string
          nullable: true
        height:
          type: string
          nullable: true
        width:
          type: string
          nullable: true
        mediaType:
          type: string
          enum:
            - JPEG
            - PNG
            - GIF
            - TIFF
        src:
          type: string
          format: uri
          example: https://item-media.cdn.spsusercontent.com/orgs/b6d9a290-9f20-465b-bcd3-4a5166eeb3d7/media/file.jpeg

  examples:
    InvalidJson:
      value:
        title: Bad Request
        status: 400
        requestId: b6d9a290-9f20-465b-bcd3-4a5166eeb3d7
        detail: "Field sent is not valid : vendorpartnumbe"
        context: [
          {
            code: "JSON_ERROR",
            message: "Unrecognized field \"vendorPartNumbe\""
          }
        ]
