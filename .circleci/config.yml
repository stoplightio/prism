version: 2
jobs:
  build:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run:
          name: cc-install
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: cc-before
          command: |
            ./cc-test-reporter before-build
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn
      - run:
          name: Create Linux CLI binary
          command: HOST=host yarn build.binary
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules/
      - run:
          name: Download prism v2
          command: curl -L https://github.com/stoplightio/prism/releases/download/v2.0.17/prism_linux_amd64 -o prism && chmod +x ./prism
      - run:
          name: Test Harness
          command: |
            PRISM_PORT=4010 SPEC=./examples/petstore.oas2.json,./examples/petstore.oas3.json BINARY=./cli-binaries/prism-cli-linux yarn test.binary
      - run:
          name: Run tests
          command: yarn test.coverage --verbose
      - run:
          name: cc-after
          command: |
            ./cc-test-reporter after-build --coverage-input-type lcov --exit-code $?
      - run:
          name: Run build
          command: yarn typecheck
  publish:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: yarn
      - run:
          name: Build all code to JavaScript
          command: yarn build
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: Publish
          command: yarn lerna publish from-git --github-release --yes
      - run:
          name: Create CLI binaries
          command: npx pkg --out-path ./cli-binaries ./packages/cli/
      - store_artifacts:
          path: ./cli-binaries
      - persist_to_workspace:
          root: ./
          paths:
            - cli-binaries
  upload_artifacts:
    docker:
      - image: circleci/golang:1-stretch
    steps:
      - attach_workspace:
          at: /tmp/
      - run:
          name: "Download GitHub Release Utility"
          command: go get github.com/tcnksm/ghr
      - run:
          name: "Publish Release artifacts on GitHub"
          command: ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${CIRCLE_TAG} /tmp/cli-binaries

workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - publish:
          filters:
            branches:
              only: master
            tags:
              only: /^v.*/
          requires:
            - build
      - upload_artifacts:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - build
            - publish
